$color-txt: var(--hctc-theme-color-3);
$color-bg: var(--hctc-theme-color-1-transparent-2);
$item-min-width: 200px;
$triangle-width: 50px;

.c-portfolio-gallery {
  position: relative;
  &--bg {
    position: absolute;
    transform: translate(-50%, -50%);
    left: 50%;
    top: 50%;
    z-index: var(--hctc-zindex-under);
    width: 100vw;
  }
  &--line-decor {
    &-top {
      max-width: 100vw;
      @include underline-full-width(left, top);
    }
    &-bottom {
      max-width: 100vw;
      @include underline-full-width(right, bottom);
    }
  }
  &__items {
    padding-top: var(--hctc-spacing-xxl);
    padding-bottom: var(--hctc-spacing-xxl);
    display: grid;
    gap: var(--hctc-spacing-xxl);
    grid-template-columns: 1fr;
    align-content: center;
    align-items: center;
    justify-content: center;
    justify-items: center;
    overflow: hidden;
    @include min-sm {
      grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
    }
  }
  &__item {
    width: fit-content;
    position: relative;
    transition: var(--hctc-transition-global);
    max-height: 150px;
    overflow: hidden;
    @include min-lg {
      max-height: unset;
      overflow: unset;
    }

    @include max-xl {
      &:nth-child(2n + 1) {
        justify-self: flex-end;
      }
      &:nth-child(2n) {
        justify-self: flex-start;
      }
    }
    @include onHover {
      .simpleParallax {
        @extend .animation-move-img;
      }
    }
    &:nth-child(1),
    &:nth-child(2),
    &:nth-child(3) {
      align-self: center;
      @include min-xxl {
        align-self: flex-end;
        transform: translateX(var(--hctc-spacing-xl));
      }
    }
    &:nth-child(4),
    &:nth-child(5),
    &:nth-child(6) {
      align-self: center;
      @include min-xxl {
        align-self: flex-start;
        transform: translateX(-var(--hctc-spacing-xl));
      }
    }
    @include onHover {
      filter: brightness(1.1);
    }
    &-img {
      z-index: var(--hctc-zindex-under);
    }
    &-txt {
      $calculated-triangle-width: calc(-1 * $triangle-width + 0.3px);
      $items: (
        1: (
          bottom,
          right,
        ),
        2: (
          top,
          left,
        ),
        3: (
          bottom,
          right,
        ),
        4: (
          top,
          left,
        ),
        5: (
          bottom,
          right,
        ),
        6: (
          top,
          left,
        ),
      );

      @each $key, $value in $items {
        &--#{$key} {
          @each $position in $value {
            @if ($position == left) {
              #{$position}: 0;
              &::after {
                right: $calculated-triangle-width;
                clip-path: polygon(0% 0%, 0% 0%, 0% 100%, 100% 100%);
              }
            }
            @if ($position == right) {
              #{$position}: 0;
              &::after {
                left: $calculated-triangle-width;
                clip-path: polygon(0 0, 100% 0%, 100% 100%, 100% 100%);
              }
            }
            @if ($position == top) {
              #{$position}: var(--hctc-spacing-xxl);
            }
            @if ($position == bottom) {
              #{$position}: var(--hctc-spacing-xxl);
            }
          }
        }
      }

      min-width: $item-min-width;
      position: absolute;
      background-color: $color-bg;
      padding: var(--hctc-spacing-sm);
      transition: var(--hctc-transition-global);

      &::after {
        bottom: 0;
        position: absolute;
        height: 100%;
        width: $triangle-width;
        content: " ";
        background-color: $color-bg;
      }
      > * {
        color: $color-txt;
      }
      p {
        font-weight: 100;
      }
      strong {
        font-weight: 900;
      }
    }
  }
}
